import os
from logging.config import fileConfig

from sqlalchemy import create_engine
from alembic import context

from alembic_utils.pg_function import PGFunction
from alembic_utils.replaceable_entity import register_entities
import alembic_postgresql_enum

from project_tracking.model import Base

# --- Monkey patch to disable PGGrantTable autogeneration ---
import alembic_utils.pg_grant_table
alembic_utils.pg_grant_table.PGGrantTable.from_database = classmethod(lambda cls, connection, **kwargs: [])
# ------------------------------------------------------------

# Alembic Config object
config = context.config

# Set up loggers
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# Target metadata for autogenerate support
target_metadata = Base.metadata

# Register custom SQL function
to_upper = PGFunction(
    schema='public',
    signature='to_upper(some_text text)',
    definition="""
    RETURNS text as
    $$
        SELECT upper(some_text)
    $$ language SQL;
    """
)
register_entities([to_upper])

def get_url():
    """Generate a URL from the environment variables."""
    return f"{os.environ['C3G_SQLALCHEMY_DATABASE_URI']}"

# Filter out grant-related objects
def include_object(object, name, type_, reflected, compare_to):
    if type_ == "grant":
        return False
    return True

# Filter out grant-related operations from autogenerated scripts
def process_revision_directives(context, revision, directives):
    script = directives[0]
    script.upgrade_ops.ops = [
        op for op in script.upgrade_ops.ops
        if "grant" not in op.__class__.__name__.lower()
    ]

def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    url = get_url()
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
        include_object=include_object
    )

    with context.begin_transaction():
        context.run_migrations()

def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    url = get_url()
    connectable = create_engine(url)

    with connectable.connect() as connection:
        context.configure(
            connection=connection,
            target_metadata=target_metadata,
            compare_type=True,
            compare_server_default=True,
            include_object=include_object,
            process_revision_directives=process_revision_directives
        )

        with context.begin_transaction():
            context.run_migrations()

if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()
